{
    "terminal.integrated.defaultProfile.windows": "PowerShell", // Usando o Powershell 7.4.5 como terminal padrão
    "files.autoSave": "afterDelay",
    "workbench.startupEditor": "none",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "explicit",
    },
    "liveServer.settings.donotShowInfoMsg": true,
    "[javascript]": {
        "editor.defaultFormatter": "vscode.typescript-language-features"
    },
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features"
    },
    "explorer.confirmDelete": false,
    "explorer.compactFolders": false,
    "security.workspace.trust.untrustedFiles": "open",
    "code-runner.runInTerminal": true,
    "github.copilot.editor.enableAutoCompletions": true,
    "editor.fontFamily": "JetBrainsMono Nerd Font", // Usando a fonte JetBrainsMono Nerd Font
    "editor.fontLigatures": true,
    "editor.fontSize": 15,
    "editor.lineHeight": 1.8,
    "extensions.ignoreRecommendations": true,
    "javascript.suggest.autoImports": true,
    "workbench.tree.enableStickyScroll": false,
    "workbench.editor.labelFormat": "short",
    "window.commandCenter": false,
    "workbench.layoutControl.enabled": false,
    "window.menuBarVisibility": "toggle",
    "workbench.colorTheme": "Default Dark Modern",
    "breadcrumbs.enabled": false,
    // Necessário extensão APC Customize UI++
    "apc.font.family": "Inter 24pt",
    "apc.stylesheet": {
        ".title-label > h2": "display: none",
        ".nosidebar .inline-tabs-placeholder": "width: 75px",
        ".pane-header": "padding: 0 8px",
        ".pane-body": "padding: 8px",
        ".split-view-view:first-child .pane-header": "display: none !important;",
        ".monaco-list-row": "border-radius: 4px;",
        ".monaco-workbench .monaco-list:not(.element-focused):focus:before": "display: none;",
        ".editor-actions": "display: none",
    },
    "apc.header": {
        "height": 36,
    },
    "apc.listRow": {
        "height": 24,
    },
    "explorer.fileNesting.enabled": true,
    "explorer.fileNesting.patterns": {
        "package.json": ".eslint*, prettier*, tsconfig*, vite*, pnpm-*, bun.lockb, nest*, package-lock*",
        "tailwind.config.*": "tailwind.config*, postcss.config*",
        ".env.local": ".env*",
        ".env": ".env*"
    },
    "terminal.integrated.fontSize": 14,
    "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font",
    "editor.minimap.enabled": false,
    "editor.renderLineHighlight": "none",
    "editor.stickyScroll.enabled": false,
    "workbench.editor.enablePreview": false,
    "[typescript]": {
        "editor.tabSize": 2,
        "editor.insertSpaces": true
    },
    "[typescriptreact]": {
        "editor.tabSize": 2,
        "editor.insertSpaces": true
    },
    "editor.semanticHighlighting.enabled": false,
    "workbench.iconTheme": "material-icon-theme",
    "emmet.includeLanguages": {
        "javascript": "javascriptreact"
    },
    "emmet.syntaxProfiles": {
        "javascript": "jsx"
    },
    "files.associations": {
        ".env.*": "dotenv",
        ".prettierrc": "json",
        "*.css": "css",
        ".dev.vars": "dotenv"
    },
    "git.enableSmartCommit": true,
    "editor.accessibilitySupport": "off",
    "editor.multiCursorMergeOverlapping": false,
    "terminal.integrated.env.windows": {},
    "console-ninja.featureSet": "Community",
    "editor.scrollbar.vertical": "hidden",
    "editor.scrollbar.horizontal": "hidden",
    "editor.scrollbar.verticalScrollbarSize": 0,
    "editor.scrollbar.horizontalScrollbarSize": 0,
    "workbench.activityBar.location": "hidden",
    "gitlens.statusBar.enabled": false,
    "gitlens.hovers.enabled": false,
    "workbench.statusBar.visible": false,
    // Configurações para compilador e extensões de C/C++
    "C_Cpp.default.compilerPath": "C:\\msys64\\mingw64\\bin\\g++.exe",
    "C_Cpp.formatting": "disabled",
    "C_Cpp.intelliSenseEngine": "disabled",
    "clangd.checkUpdates": true,
    "clangd.onConfigChanged": "restart",
    "clangd.arguments": [
        // --background-index              - Index project code in the background and persist index on disk.
        "-background-index",
        // --header-insertion=<value>      - Add #include directives when accepting code completions
        //  =iwyu                          -   Include what you use. Insert the owning header for top-level symbols, unless the header is already directly included or the symbol is forward-declared
      //  =never                         -   Never insert #include directives as part of code completion
      "-header-insertion=iwyu",
      // --header-insertion-decorators   - Prepend a circular dot or space before the completion label, depending on whether an include line will be inserted or not
      "-header-insertion-decorators",
      // --inlay-hints                   - Enable preview of InlayHints feature
      "--inlay-hints", 
      // --function-arg-placeholders     - When disabled, completions contain only parentheses for function calls. When enabled, completions also contain placeholders for method parameters
      "--function-arg-placeholders",
    ],
  
    // Prefer "Ninja"
    "cmake.generator": "Ninja",
    "cmake.sourceDirectory": "${workspaceFolder}",
    // Set build directory to format: "./build/clang13-msvc-x86_64/debug
    "cmake.buildDirectory": "${workspaceFolder}/build/${buildKit}/${buildType}",
    // Copy compile_commands.json from the build folder to root folder, so that clangd can use it
    // NOTE: Alternatively, you can pass --compile-commands-dir=<string> in the "clangd.arguments" array above
    "cmake.copyCompileCommands": "${workspaceFolder}/compile_commands.json",
    // Configure the environment for VCPKG and compile_commands. Disable verbose if you want less information from builds.
    "cmake.environment": {
      "VERBOSE": "1",
      // Assuming you have vcpkg in-tree at "<project>/vcpkg", otherwise change this or set it in your ENV system-wide
      "VCPKG_ROOT": "${workspaceFolder}/vcpkg",
      // Set your default triplet here to match your host and preference
      "VCPKG_DEFAULT_TRIPLET": "x64-windows-static"
    },
    "cmake.configureSettings": {
      "CMAKE_EXPORT_COMPILE_COMMANDS": 1,
      "CMAKE_TOOLCHAIN_FILE": "$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
    }
}